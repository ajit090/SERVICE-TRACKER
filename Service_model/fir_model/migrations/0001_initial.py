# Generated by Django 4.0.4 on 2022-07-01 10:43

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AuthUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AdditionalInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
            ],
            options={
                'verbose_name_plural': 'ADDITIONAL INFO',
            },
        ),
        migrations.CreateModel(
            name='Application',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('application', models.CharField(max_length=150)),
            ],
            options={
                'verbose_name_plural': 'APPLICATION',
            },
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('customer', models.CharField(max_length=150)),
            ],
            options={
                'verbose_name_plural': 'CUSTOMER',
            },
        ),
        migrations.CreateModel(
            name='Customerissue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
            ],
            options={
                'verbose_name_plural': 'CUSTOMER ISSUE',
            },
        ),
        migrations.CreateModel(
            name='Diagnosis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('diagnosis', models.CharField(max_length=150)),
            ],
            options={
                'verbose_name_plural': 'DIAGNOSIS',
            },
        ),
        migrations.CreateModel(
            name='IsUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.CharField(max_length=20, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Oem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('oem', models.CharField(max_length=150)),
            ],
            options={
                'verbose_name_plural': 'OEM',
            },
        ),
        migrations.CreateModel(
            name='Priority',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('priority', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name_plural': 'PRIORITY',
            },
        ),
        migrations.CreateModel(
            name='Resolution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('resolution', models.CharField(max_length=150)),
            ],
            options={
                'verbose_name_plural': 'RESOLUTION',
            },
        ),
        migrations.CreateModel(
            name='Resolutiontype',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('resolution_type', models.CharField(max_length=250)),
            ],
            options={
                'verbose_name_plural': 'RESOLUTION TYPE',
            },
        ),
        migrations.CreateModel(
            name='Specification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('specification', models.CharField(max_length=150)),
            ],
            options={
                'verbose_name_plural': 'SPECIFICATION',
            },
        ),
        migrations.CreateModel(
            name='Status',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name_plural': 'STATUS',
            },
        ),
        migrations.CreateModel(
            name='Techtracker',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('complaint_id', models.IntegerField()),
                ('dealer_name', models.CharField(max_length=100)),
                ('serial_no', models.CharField(max_length=100)),
                ('receipt_date', models.DateTimeField()),
                ('additional_comments', models.CharField(blank=True, max_length=150)),
                ('capacity_after_testing', models.CharField(blank=True, max_length=100)),
                ('closure_date', models.DateTimeField(blank=True, null=True)),
                ('final_remarks', models.CharField(blank=True, max_length=100)),
                ('remarks_dispatched', models.CharField(blank=True, max_length=150)),
                ('application_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='fir_model.application')),
                ('diagnosis', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='fir_model.diagnosis')),
                ('oem', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='fir_model.oem')),
                ('priority', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='fir_model.priority')),
                ('resolution', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='fir_model.resolution')),
                ('sku', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='fir_model.specification')),
                ('status', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='fir_model.status')),
            ],
            options={
                'verbose_name_plural': 'TECH TRACKER',
            },
        ),
        migrations.CreateModel(
            name='Fir',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comments', models.CharField(blank=True, max_length=100)),
                ('complaint_id', models.IntegerField()),
                ('serial_no', models.CharField(max_length=50)),
                ('register_date', models.DateTimeField()),
                ('dealer_name', models.CharField(max_length=100)),
                ('state', models.CharField(blank=True, max_length=50)),
                ('location', models.CharField(max_length=100)),
                ('client_name', models.CharField(blank=True, max_length=100)),
                ('contact_no', models.CharField(blank=True, max_length=50)),
                ('observations', models.CharField(blank=True, max_length=250)),
                ('tracker', models.CharField(max_length=100)),
                ('pickup_date', models.DateTimeField(blank=True, null=True)),
                ('receipt_date', models.DateTimeField(blank=True, null=True)),
                ('closure_date', models.DateTimeField(blank=True, null=True)),
                ('remark', models.CharField(max_length=150)),
                ('additional_info', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='add', to='fir_model.additionalinfo')),
                ('application_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='fir_model.application')),
                ('customer_issue', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='cissues', to='fir_model.customerissue')),
                ('customer_raised_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='fir_model.customer')),
                ('oem', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='fir_model.oem')),
                ('resolution_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='fir_model.resolutiontype')),
                ('specification', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='fir_model.specification')),
                ('status', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='fir_model.status')),
            ],
            options={
                'verbose_name_plural': 'FIR',
            },
        ),
        migrations.CreateModel(
            name='Complaint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=150)),
                ('comments', models.CharField(blank=True, max_length=100)),
                ('complaint_id', models.IntegerField()),
                ('serial_no', models.CharField(max_length=50)),
                ('register_date', models.DateTimeField()),
                ('dealer_name', models.CharField(max_length=100)),
                ('state', models.CharField(blank=True, max_length=50)),
                ('location', models.CharField(max_length=100)),
                ('client_name', models.CharField(blank=True, max_length=100)),
                ('contact_no', models.CharField(blank=True, max_length=50)),
                ('observations', models.CharField(blank=True, max_length=250)),
                ('tracker', models.CharField(max_length=100)),
                ('pickup_date', models.DateTimeField(blank=True, null=True)),
                ('receipt_date', models.DateTimeField(blank=True, null=True)),
                ('closure_date', models.DateTimeField(blank=True, null=True)),
                ('remark', models.CharField(max_length=150)),
                ('additional_comments', models.CharField(blank=True, max_length=150)),
                ('capacity_after_testing', models.CharField(blank=True, max_length=100)),
                ('final_remarks', models.CharField(blank=True, max_length=100)),
                ('remarks_dispatched', models.CharField(blank=True, max_length=150)),
                ('additional_info', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='add2', to='fir_model.additionalinfo')),
                ('application_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='fir_model.application')),
                ('assign_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('customer_issue', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='cissues1', to='fir_model.customerissue')),
                ('customer_raised_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='fir_model.customer')),
                ('diagnosis', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='fir_model.diagnosis')),
                ('oem', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='fir_model.oem')),
                ('resolution', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='fir_model.resolution')),
                ('resolution_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='fir_model.resolutiontype')),
                ('specification', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='fir_model.specification')),
                ('status', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='fir_model.status')),
            ],
            options={
                'verbose_name_plural': 'COMPLAINT',
            },
        ),
        migrations.AddField(
            model_name='additionalinfo',
            name='customer_issue',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='additionalinfos', to='fir_model.customerissue'),
        ),
        migrations.AddField(
            model_name='authuser',
            name='user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='fir_model.isuser'),
        ),
        migrations.AddField(
            model_name='authuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
